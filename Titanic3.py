# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UlKe6jXf-Ae_KPRTpmrh9LAPppnfDeRy
"""

from google.colab import files
uploaded = files.upload()

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
dat = pd.read_csv('train.csv')
dat.head()

dat.shape
dat.isnull().sum()

(dat.Survived == 0).sum()/((dat.Survived == 1).sum()+ (dat.Survived == 0).sum())

print((dat.Embarked == 'C').sum())
print((dat.Embarked == 'S').sum())
print((dat.Embarked == 'Q').sum())

dat.Age = dat.Age.fillna(0)
average = (dat.Age.sum())/(891-177)
for i in range(len(dat.Age)):
  if dat.Age[i] == 0  :
    dat.Age[i] = average
print(dat.Age.isnull().sum())

#logistic regression#
map1 = dat.Sex
map2 = dat.Embarked
Sex_no = []
Embark_no = []
for i in range(len(map1)):
  if map1[i] == 'male':
    Sex_no.append(1)
  elif map1[i] =='female':
    Sex_no.append(0)
for i in range(len(map2)):
  if map2[i] == 'C':
    Embark_no.append(0)
  elif map2[i] =='S':
    Embark_no.append(1)
  elif map2[i] =='Q':
    Embark_no.append(2) 
  else :
    Embark_no.append(0.89)#NaN replaced with average of other quantities
#print(Sex_no)
#dat2 is same as dat with Sex column replaced by integers
dat2 = dat.assign(Sex = Sex_no )
dat2 = dat2.assign(Embarked = Embark_no)
dat2.head()

dat2.Cabin = dat2.Cabin.fillna('U')
did = {'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'T':8,'U':0}
for i in range(len(dat2.Cabin)):
  dat2.Cabin[i] = str(dat2.Cabin[i][0])
  dat2.Cabin[i] =did[dat2.Cabin[i]]
dat2.Cabin

dat2.head()

alm = dat2.Ticket
print(len(alm))
alm.value_counts()

X = dat2.drop("PassengerId",axis = 1)
X = X.drop("Survived",axis = 1)
X = X.drop("Name",axis = 1)
X = X.drop("Ticket",axis = 1)
y = dat.Survived
ma = X
ca = y
from sklearn.model_selection import train_test_split
X, x, Y, y = train_test_split(X, y, test_size=0.2)

alpha = np.mean(X)
beta = np.std(X)
X = (X-alpha)/beta

x = (x-alpha)/beta

from sklearn.linear_model import LogisticRegression
#X, Y = load_iris(return_X_y=True)
clf = LogisticRegression(solver ='lbfgs',max_iter = 200,random_state=0).fit(X, Y)
#x,y = load_iris(return_X_y=True)
clf.score(x,y)

from sklearn import ensemble
original_params = {'n_estimators': 1000, 'max_leaf_nodes': 4, 'max_depth': None, 'random_state': 2,
                   'min_samples_split': 5}
params = dict(original_params)
clg = ensemble.GradientBoostingClassifier(**params)
clg.fit(X,Y)
clg.score(x,y)

from sklearn.ensemble import RandomForestClassifier
regr = RandomForestClassifier(max_depth=None, random_state=0,n_estimators = 1000,max_leaf_nodes= 4)
regr.fit(X,Y)

regr.score(x,y)

from sklearn.model_selection import cross_val_score
random_forest = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='auto',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=5, min_samples_split=16,
                       min_weight_fraction_leaf=0.0, n_estimators=700,
                       n_jobs=-1, oob_score=True, random_state=1, verbose=0,
                       warm_start=False)
random_forest.fit(ma,ca)
scores = cross_val_score(random_forest, ma, ca, cv=10, scoring = "accuracy")

print("Scores:", scores)
print("Mean:", scores.mean())
print("Standard Deviation:", scores.std())

from google.colab import files
uploaded = files.upload()

tet =  pd.read_csv('test.csv')
tet.head()

print((tet.Embarked == 'C').sum())
print((tet.Embarked == 'S').sum())
print((tet.Embarked == 'Q').sum())

tet.shape

tet.isnull().sum()

tet.Age = tet.Age.fillna(0)
average = (tet.Age.sum())/(418-86)
for i in range(len(tet.Age)):
  if tet.Age[i] == 0  :
    tet.Age[i] = average
print(tet.Age)
tet.Fare = tet.Fare.fillna(0)
average = (tet.Fare.sum())/(418-1)
for i in range(len(tet.Fare)):
  if tet.Fare[i] == 0  :
    tet.Fare[i] = average
print(tet.Fare)

mape1 = tet.Sex
mape2 = tet.Embarked
Sex_no1 = []
Embark_no1 = []
for i in range(len(mape1)):
  if mape1[i] == 'male':
    Sex_no1.append(1)
  elif mape1[i] =='female':
    Sex_no1.append(0)
for i in range(len(mape2)):
  if mape2[i] == 'C':
    Embark_no1.append(0)
  elif mape2[i] =='S':
    Embark_no1.append(1)
  elif mape2[i] =='Q':
    Embark_no1.append(2)
tet2 = tet.assign(Sex = Sex_no1 )
tet2 = tet2.assign(Embarked = Embark_no1)
tet2.head()

tet2.Cabin = tet2.Cabin.fillna('U')
dide = {'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'T':8,'U':0}
for i in range(len(tet2.Cabin)):
  tet2.Cabin[i] = str(tet2.Cabin[i][0])
  tet2.Cabin[i] =dide[tet2.Cabin[i]]
tet2.Cabin

X1 = tet2.drop("PassengerId",axis = 1)
X1 = X1.drop("Name",axis = 1)
X1 = X1.drop("Ticket",axis = 1)


ans = random_forest.predict(X1)

X1.head()

# Save Numpy array to csv
np.savetxt('array.csv', [ans], delimiter=',', fmt='%d')

df1 = pd.read_csv('test.csv')
df1.shape

ans.shape

df1["Survived"] = ans;

myans = df1[["PassengerId","Survived"]]

myans.to_csv('real2.csv', index = False)

from google.colab import files
files.download("ans.csv")